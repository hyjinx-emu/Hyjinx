name: publish

on:
  push:
   paths:
     - '.github/actions/**'
     - '.github/workflows/publish.yml'
     - 'src/**'
     - 'Directory.Packages.props'
     - 'global.json'
  release:
    types: [ published ]

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  
jobs:
  prepare:
    runs-on: ubuntu-latest
    
    outputs:
      version_number: ${{ steps.prepared.outputs.version_number }}
      version_suffix: ${{ steps.prepared.outputs.version_suffix }}
      full_version: ${{ steps.prepared.outputs.full_version }}
      short_hash: ${{ steps.prepared.outputs.short_hash }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Prepare version
        id: prepared
        uses: ./.github/actions/prepare-version
        with:
          explicit_version: ${{ github.event.inputs.version }}
          
  build:
    name: build (${{ matrix.platform.name }})
    runs-on: ${{ matrix.platform.runs-on }}
    timeout-minutes: 60
    needs: prepare

    env:
      STAGING_DIR: dist
      PACKAGE_DIR: out
      
    strategy:
      matrix:
        platform:
          - { name: win-x64,     runs-on: windows-latest,      os: windows, zip_os_name: win_x64     }
          - { name: linux-x64,   runs-on: ubuntu-latest,       os: linux,   zip_os_name: linux_x64   }
#          - { name: linux-arm64, runs-on: ubuntu-latest-arm64, os: linux,   zip_os_name: linux_arm64 }
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        uses: ./.github/actions/build-template
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          project: src/Hyjinx/Hyjinx.csproj
          runtime_identifier: ${{ matrix.platform.name }}
          staging_dir: ${{ env.STAGING_DIR }}
          version: ${{ needs.prepare.outputs.version_number }}
          version_suffix: ${{ needs.prepare.outputs.version_suffix }}
          short_hash: ${{ needs.prepare.outputs.short_hash }}
          
      - name: Package
        uses: ./.github/actions/package-template
        with:
          runtime_identifier: ${{ matrix.platform.name }}
          package_suffix: ${{ matrix.platform.zip_os_name }}
          packager: ${{ matrix.platform.os }}
          version: ${{ needs.prepare.outputs.full_version }}
          staging_dir: ${{ env.STAGING_DIR }}
          package_dir: ${{ env.PACKAGE_DIR }}
          
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}
          path: "${{ env.PACKAGE_DIR }}/"
          
  release:
    runs-on: ubuntu-latest

    env:
      STAGING_DIR: dist

    needs:
      - prepare
      - build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.STAGING_DIR }}/
          merge-multiple: true

      - name: Publish
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare.outputs.full_version }}
          artifacts: ${{ env.STAGING_DIR }}/**
          prerelease: ${{ github.event.name != 'release' }}
          # generateReleaseNotes: true

      - name: Update version
        if: github.event.name == 'release'
        uses: vers-one/dotnet-project-version-updater@v1.7
        with:
          file: "src/.build/common.props"
          version: ${{ needs.prepare.outputs.version_number }}

      - name: Commit version
        if: github.event.name == 'release'
        shell: bash
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git commit -am "Bumping version"
          git push origin HEAD:main

name: publish

on:
  push:
#    branches:
#      - main
#    paths:
#      - '.github/actions/**'
#      - '.github/workflows/publish.yml'
#      - 'src/**'
#      - 'Directory.Packages.props'
#      - 'global.json'
  release:
    types: [ published ]

permissions: 
  contents: write
  pull-requests: write
  
env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  
jobs:
  prepare:
    runs-on: ubuntu-latest
    
    outputs:
      version_number: ${{ steps.prepared.outputs.version_number }}
      version_suffix: ${{ steps.prepared.outputs.version_suffix }}
      full_version: ${{ steps.prepared.outputs.full_version }}
      short_hash: ${{ steps.prepared.outputs.short_hash }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Prepare version
        id: prepared
        uses: ./.github/actions/prepare-version
        with:
          target_file: "Directory.Build.props"
          explicit_version: ${{ github.event.release.tag_name }}
          
  build-native:
    name: build (${{ matrix.platform.name }})
    runs-on: ${{ matrix.platform.runner }}-latest
    timeout-minutes: 60
    needs: prepare

    env:
      STAGING_DIR: dist
      PACKAGE_DIR: out
      
    strategy:
      matrix:
        platform:
          - { name: win-x64,    runner: windows,  zip_os_name: win_x64     }
          - { name: linux-x64,  runner: ubuntu,   zip_os_name: linux_x64   }
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        uses: ./.github/actions/build-template
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          version_file: 'Directory.Build.props'
          project: src/Hyjinx/Hyjinx.csproj
          runtime_identifier: ${{ matrix.platform.name }}
          staging_dir: ${{ env.STAGING_DIR }}
          version: ${{ needs.prepare.outputs.version_number }}
          version_suffix: ${{ needs.prepare.outputs.version_suffix }}
          short_hash: ${{ needs.prepare.outputs.short_hash }}
          
      - name: Package
        uses: ./.github/actions/package-template
        with:
          runtime_identifier: ${{ matrix.platform.name }}
          package_suffix: ${{ matrix.platform.zip_os_name }}
          packager: ${{ matrix.platform.runner }}
          version: ${{ needs.prepare.outputs.full_version }}
          staging_dir: ${{ env.STAGING_DIR }}
          package_dir: ${{ env.PACKAGE_DIR }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}
          path: "${{ env.PACKAGE_DIR }}/"

  build-nuget:
    runs-on: ubuntu-latest
    needs: [ prepare ]
    
    env:
      STAGING_DIR: dist
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Package
        uses: ./.github/actions/nuget-template
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          version_file: 'Directory.Build.props'
          staging_dir: ${{ env.STAGING_DIR }}
          version: ${{ needs.prepare.outputs.version_number }}
          version_suffix: ${{ needs.prepare.outputs.version_suffix }}
          short_hash: ${{ needs.prepare.outputs.short_hash }}
          
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: "${{ env.STAGING_DIR }}/"
          
  release:
    runs-on: ubuntu-latest
    needs: [ prepare, build-native, build-nuget ]
    if: true == false

    env:
      STAGING_DIR: dist

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.STAGING_DIR }}/
          merge-multiple: true

      - name: Publish
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare.outputs.full_version }}
          artifacts: "${{ env.STAGING_DIR }}/*.*"
          prerelease: ${{ github.event.action != 'published' }}
          generateReleaseNotes: ${{ github.event.action != 'published' }}
          allowUpdates: true
          omitBodyDuringUpdate: true

      - name: Bump version
        uses: ./.github/actions/bump-version
        if: github.event.action == 'published'
        with:
          target_file: "Directory.Build.props"
          new_version: ${{ needs.prepare.outputs.full_version }}
          token: ${{ github.token }}

  post-release:
    runs-on: ubuntu-latest
    needs: [ prepare, release ]